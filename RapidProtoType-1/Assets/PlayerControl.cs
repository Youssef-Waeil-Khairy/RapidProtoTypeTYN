//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/PlayerControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControl: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControl"",
    ""maps"": [
        {
            ""name"": ""PlayerMovementSystem"",
            ""id"": ""420b4c8a-0f59-46f7-8bcd-fb08f7c3f727"",
            ""actions"": [
                {
                    ""name"": ""KeyboardInput"",
                    ""type"": ""PassThrough"",
                    ""id"": ""8eb29df7-f490-4367-a7a3-7949783a3bdb"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""8f29d537-81e9-4b37-891d-6cecc8095ea8"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyboardInput"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""deec3e17-bf92-4d35-94e4-65fff70f3935"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyboardInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""941da28e-fd22-4100-8ed7-82cb9bc68df2"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyboardInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""74b2bf59-1fce-441c-acc9-a0a145362bca"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyboardInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""2fbc6b30-9b15-4034-b486-251297937cd8"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyboardInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerMovementSystem
        m_PlayerMovementSystem = asset.FindActionMap("PlayerMovementSystem", throwIfNotFound: true);
        m_PlayerMovementSystem_KeyboardInput = m_PlayerMovementSystem.FindAction("KeyboardInput", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerMovementSystem
    private readonly InputActionMap m_PlayerMovementSystem;
    private List<IPlayerMovementSystemActions> m_PlayerMovementSystemActionsCallbackInterfaces = new List<IPlayerMovementSystemActions>();
    private readonly InputAction m_PlayerMovementSystem_KeyboardInput;
    public struct PlayerMovementSystemActions
    {
        private @PlayerControl m_Wrapper;
        public PlayerMovementSystemActions(@PlayerControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @KeyboardInput => m_Wrapper.m_PlayerMovementSystem_KeyboardInput;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMovementSystem; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMovementSystemActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerMovementSystemActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerMovementSystemActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerMovementSystemActionsCallbackInterfaces.Add(instance);
            @KeyboardInput.started += instance.OnKeyboardInput;
            @KeyboardInput.performed += instance.OnKeyboardInput;
            @KeyboardInput.canceled += instance.OnKeyboardInput;
        }

        private void UnregisterCallbacks(IPlayerMovementSystemActions instance)
        {
            @KeyboardInput.started -= instance.OnKeyboardInput;
            @KeyboardInput.performed -= instance.OnKeyboardInput;
            @KeyboardInput.canceled -= instance.OnKeyboardInput;
        }

        public void RemoveCallbacks(IPlayerMovementSystemActions instance)
        {
            if (m_Wrapper.m_PlayerMovementSystemActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerMovementSystemActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerMovementSystemActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerMovementSystemActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerMovementSystemActions @PlayerMovementSystem => new PlayerMovementSystemActions(this);
    public interface IPlayerMovementSystemActions
    {
        void OnKeyboardInput(InputAction.CallbackContext context);
    }
}
